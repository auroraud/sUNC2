-- Utility function to validate if an object is a function
local function isValidFunction(func)
    return type(func) == "function"
end

-- Utility function to validate if an instance is valid
local function isValidInstance(instance)
    return typeof(instance) == "Instance"
end

-- Variables to track test results
local totalTests = 0
local passedTests = 0
local failedTests = 0

-- Function to update test results
local function updateTestResults(isPassed)
    totalTests = totalTests + 1
    if isPassed then
        passedTests = passedTests + 1
    else
        failedTests = failedTests + 1
    end
end

function checkExecutorName()
    print("Start sivyUNC check..")
    print("Grabbing executor name:")
    
    local executorName = identifyexecutor() -- Grab the executor name
    print("Executor Name: " .. tostring(executorName))
end

print("\n")

checkExecutorName()
task.wait(2)

function checkUpvalue(func, upvalueIndex, expectedUpvalue)
    -- Ensure the provided function is valid
    if not isValidFunction(func) then
        warn("❌ Invalid function provided to debug.getupvalue check.")
        updateTestResults(false)
        return
    end
    
    local name, value = debug.getupvalue(func, upvalueIndex)
    
    if value == expectedUpvalue then
        print("✅ debug.getupvalue passed with expected value: " .. tostring(value))
        updateTestResults(true)
    else
        warn("❌ debug.getupvalue failed: expected " .. tostring(expectedUpvalue) .. " but got " .. tostring(value))
        updateTestResults(false)
    end
end

-- Check for gethiddenproperty
function checkHiddenProperty(instance, propertyName, expectedValue, expectedIsHidden)
    if not isValidInstance(instance) then
        warn("❌ Invalid instance provided to gethiddenproperty check.")
        updateTestResults(false)
        return
    end

    local property, isHidden = gethiddenproperty(instance, propertyName)
    
    if property == expectedValue and isHidden == expectedIsHidden then
        print("✅ gethiddenproperty passed with expected value: " .. tostring(property) .. " and isHidden: " .. tostring(isHidden))
        updateTestResults(true)
    else
        warn("❌ gethiddenproperty failed: expected value " .. tostring(expectedValue) 
            .. " and isHidden " .. tostring(expectedIsHidden) 
            .. " but got value " .. tostring(property) 
            .. " and isHidden " .. tostring(isHidden))
        updateTestResults(false)
    end
end

function checkCheckCaller()
    if checkcaller() then
        print("✅ checkcaller passed: Main scope returned true.")
        updateTestResults(true)
    else
        warn("❌ checkcaller failed: Main scope did not return true.")
        updateTestResults(false)
    end
end

-- Test for debug.getupvalue
local upvalue = function() end
local function test()
    print(upvalue)
end

-- Add delay between checks
checkUpvalue(test, 1, upvalue)
task.wait(1) -- 1-second delay between checks

local fire = Instance.new("Fire")
checkHiddenProperty(fire, "size_xml", 5, true)
task.wait(1) -- 1-second delay between checks

checkCheckCaller()
task.wait(1)


-- Display test results at the end
print("✅ Total Tests passed: " .. passedTests)
print("❌ Total Tests failed: " .. failedTests)

-- Format the success rate to two decimal places
local successRate = totalTests > 0 and (passedTests / totalTests * 100) or 0
print(string.format("Success Rate: %.2f%% (%d out of %d)", successRate, passedTests, totalTests))
